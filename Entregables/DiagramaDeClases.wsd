@startuml


Class PrestacionDeServicio {    
    - servicio: Servicio
    - incidentes: List<Incidente>

    + funciona() : String
    + nuevoIncidente() : Incidente
}


Class Servicio {
    + informacion(): String
}


class Rol{
    -usuario: List<Usuario>
    -permisos: Set<Permiso>

    +tenesPermiso(): void
}




class Permiso{
 - String: Nombre

}


class Comunidad {
    -roles: set<Rol>
    -nombre: String
    -serviciosDeInteres: Set<PrestacionDeServicio>
    - incidentes: List<Incidente>


    + asginarRol(usuario: Usuario)
    + aceptarUsuario(usuario: Usuario)
    + eliminarUsuario(Usuario: Usuario)
    + nuevoIncidenteEn(Incidente: incidente, miembro: Membresia, observaciones: String)
}



class Usuario{
    -nombre: String
    -apellido: String
    -correoElectronico: String
    -contrasenia: String
    -interes: Intereses
    - membresias: Set<Membresia>
    - estraegiaDeNotificacion: EstrategiaDeNotificacion




    +setContrasenia(contrasena: String): void
    +unirseAComunidad(comunidad: Comunidad, rol: Rol): void
    +abandonarComunidad(comunidad: Comunidad): void
}




Class Entidad {
    - establecimientos : Set<Establecimiento>
    - localizacion : Localizacion
    - nombre : String
}




Class Establecimiento {
    - nombre : String
    - localizacion : Localizacion
    - servicios: Set<PrestacionDeServicio>
}




Class Membresia {
    - comunidad: Comunidad
    - Roles: Rol

    + abrirIncidente(prestacionDeServicio: PrestacionDeServicio, observaciones: String)
}




Class Localizacion {
    - adapter: AdapterLocalizacion

    + ejecutarConsulta(String id) : Localizacion
}




Interface AdapterLocalizacion {
    + ejecutarConsulta(String id) : Localizacion
}




Class AdapterLocalizacionGeorefApi {
    - adaptada: ServicioGeoref




    + ejecutarConsulta(String id) : Localizacion
}




Class ServicioGeoref {
    + obtenerLocalizacion(String id) : Localizacion
}




Class Intereses {
    - Set<Servicio>
    - Set<Entidad>




    + estaInteresado(Servicio, Entidad)
}


Class EntidadPrestadora {
    - nombre : String    
    - personaDesignada: Usuario
    - serviciosPrestados: Set<Entidad>
}


Class OrganismoDeControl {
    - nombre : String    
    - personaDesignada: Usuario
    - entidadesQuePosee: Set<EntidadPrestadora>
}

class Ubicacion {
- provincia: String
- municipio: String
- localidad: String
}

Usuario -> Localizacion 
Entidad -> Localizacion


EntidadPrestadora --> "*" Entidad
OrganismoDeControl --> "*" EntidadPrestadora


Servicio <- PrestacionDeServicio
Comunidad -> "*" PrestacionDeServicio
Entidad --> "*" Establecimiento
Intereses --> "*" Entidad
Intereses --> "*" Servicio 
Establecimiento --> "*" PrestacionDeServicio
Establecimiento -> Localizacion
Localizacion -> Ubicacion


Usuario <-- EntidadPrestadora
Usuario <-- OrganismoDeControl
Rol --> "*" Usuario
Permiso "*" <-- Rol
Rol "*" <- Comunidad
Usuario -> "*" Membresia
Membresia -> Comunidad
Rol <-- Membresia
Intereses <- Usuario




Localizacion --> AdapterLocalizacion
AdapterLocalizacion <|-- AdapterLocalizacionGeorefApi
AdapterLocalizacionGeorefApi --> ServicioGeoref


/' Entrega 3 '/

/' INCIDENTES '/
Class Incidente {
    - fechaApertura: Date
    - resuelto: Boolean 
}

Class IncidenteDeComunidad {
    - incidente: Incidente
    - miembro: Membresia
    - observaciones: String
    - fechaCierre: Date
}

PrestacionDeServicio --> "*" Incidente
Comunidad --> "*" IncidenteDeComunidad
IncidenteDeComunidad --> Incidente
IncidenteDeComunidad --> Membresia

/' CONFIGURACION DE NOTIFICACIONES '/
Class EstrategiaDeNotificacion {
    - formaDeRecibir: FormaDeRecibir
    - medioPreferido: MedioDeNotificacion
}

Interface MedioDeNotificacion {

}

Class NotificarPorWhatsApp {

}

Class NotificarPorMail {

}

Interface FormaDeRecibir {
    
}

Class CuandoSuceden {

}

Class SinApuros {

}

/' NOTIFICACIONES '/

Class FactoryNotificacion {
    + crearNotificacion(notificacion: INotificacion) 
}

Interface INotificacion{
    + algunaOperacion(): void
}

Class AperturaDeIncidente{
    + algunaOperacion(): void
}

Class CierreDeIncidente{
    + algunaOperacion(): void
}

Class RevisionManualDeIncidente{
    + algunaOperacion(): void
}

EstrategiaDeNotificacion <-- Usuario

FormaDeRecibir <-- EstrategiaDeNotificacion
MedioDeNotificacion <-- EstrategiaDeNotificacion

CuandoSuceden ..|> FormaDeRecibir
SinApuros ..|> FormaDeRecibir

NotificarPorWhatsApp ..|> MedioDeNotificacion
NotificarPorMail ..|> MedioDeNotificacion

FactoryNotificacion .> INotificacion
INotificacion <|.. AperturaDeIncidente
INotificacion <|.. CierreDeIncidente
INotificacion <|.. RevisionManualDeIncidente


@enduml
