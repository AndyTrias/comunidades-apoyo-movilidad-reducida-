@startuml

Class PrestacionDeServicio {    
    - servicio: Servicio
    - incidentes: List<Incidente>

    + funciona() : String
    + abrirIncidente(): void

}


Class Servicio {
    + informacion(): String
}


class Rol{
    -usuario: List<Usuario>
    -permisos: Set<Permiso>

    +tenesPermiso(): void
}




class Permiso{
 - String: Nombre

}


class Comunidad {
    -roles: set<Rol>
    -nombre: String
    -serviciosDeInteres: Set<PrestacionDeServicio>
    - incidentes: List<IncidenteDeComunidad>


    + asginarRol(usuario: Usuario)
    + aceptarUsuario(usuario: Usuario)
    + eliminarUsuario(Usuario: Usuario)
    + nuevoIncidenteEn(Incidente: incidente, usuario: Usuario, observaciones: String)
    + cantidadDeMiembros(): int
}



class Usuario{
    -nombre: String
    -apellido: String
    -correoElectronico: String
    -contrasenia: String
    -interes: Intereses
    - membresias: Set<Membresia>
    - estraegiaDeNotificacion: EstrategiaDeNotificacion




    +setContrasenia(contrasena: String): void
    +unirseAComunidad(comunidad: Comunidad, rol: Rol): void
    +abandonarComunidad(comunidad: Comunidad): void
}




Class Entidad {
    - establecimientos : Set<Establecimiento>
    - localizacion : Localizacion
    - nombre : String

    + getPrestacionesDeServicio() : Set<PrestacionDeServicio>
}




Class Establecimiento {
    - nombre : String
    - localizacion : Localizacion
    - servicios: Set<PrestacionDeServicio>
}




Class Membresia {
    - comunidad: Comunidad
    - Roles: Rol
}




Class Localizacion {
    - adapter: AdapterLocalizacion
    - ubicacion: Ubicacion

    + getListadoProvincias() : ListadoProvincias
    + getMunicipiosDeProvincia(String idProvincia) : ListadoMunicipios
    + getLocalidadesDeMunicipio(String idProvincia, String idMunicipio) : ListadoLocalidades
    + setUbicacionAsProvincia(int idProvincia) : void
    + setUbicacionAsMunicipio(int idMunicipio) : void
    + setUbicacionAsLocalidad(int idLocalidad) : void
}




Interface AdapterLocalizacion {
    + getListadoProvincias() : ListadoProvincias
    + getMunicipiosDeProvincia(String idProvincia) : ListadoMunicipios
    + getLocalidadesDeMunicipio(String idProvincia, String idMunicipio) : ListadoLocalidades
    + getProvinciaById(int idProvincia) : ListadoProvincias
    + getMunicipioById(int idMunicipio) : ListadoMunicipios
    + getLocalidadById(long idLocalidad) : ListadoLocalidades
}




Class AdapterLocalizacionGeorefApi {
    - adapterServicioGeoref: ServicioGeoref

    + getListadoProvincias() : ListadoProvincias
    + getMunicipiosDeProvincia(String idProvincia) : ListadoMunicipios
    + getLocalidadesDeMunicipio(String idProvincia, String idMunicipio) : ListadoLocalidades
    + getProvinciaById(int idProvincia) : ListadoProvincias
    + getMunicipioById(int idMunicipio) : ListadoMunicipios
    + getLocalidadById(long idLocalidad) : ListadoLocalidades
}




Class ServicioGeoref {
    - instancia: ServicioGeoref
    - urlAPI: String
    - retrofit: Retrofit

    + getInstancia() : ServicioGeoref
    + listadoProvincias() : ListadoProvincias
    + listadoProvincias(int id) : ListadoProvincias
    + listadoMunicipios(String id) : ListadoMunicipios
    + listadoMunicipios(int idProvincia) : ListadoMunicipios
    + listadoLocalidades(String idProvincia, String idMunicipio) : ListadoLocalidades
    + listadoLocalidades(long id) : ListadoLocalidades
}




Class Intereses {
    - Set<Servicio>
    - Set<Entidad>




    + estaInteresado(Servicio, Entidad)
}


Class EntidadPrestadora {
    - nombre : String    
    - personaDesignada: Usuario
    - serviciosPrestados: Set<Entidad>
}


Class OrganismoDeControl {
    - nombre : String    
    - personaDesignada: Usuario
    - entidadesQuePosee: Set<EntidadPrestadora>
}

class Ubicacion {
    - provincia: Provincia
    - municipio: Municipio
    - localidad: Localidad
}

Localizacion <-- Usuario 
Localizacion <- Entidad
Localizacion <- Establecimiento
Localizacion -> Ubicacion

EntidadPrestadora --> "*" Entidad
OrganismoDeControl -> "*" EntidadPrestadora


Servicio <- PrestacionDeServicio
Comunidad -> "*" PrestacionDeServicio
Entidad --> "*" Establecimiento
Intereses --> "*" Entidad
Intereses --> "*" Servicio 
Establecimiento --> "*" PrestacionDeServicio




Usuario <-- EntidadPrestadora
Usuario <-- OrganismoDeControl
Rol --> "*" Usuario
Permiso "*" <-- Rol
Rol "*" <- Comunidad
Usuario -> "*" Membresia
Membresia -> Comunidad
Rol <-- Membresia
Intereses <- Usuario




AdapterLocalizacion <-- Localizacion
AdapterLocalizacionGeorefApi --|> AdapterLocalizacion
ServicioGeoref <-- AdapterLocalizacionGeorefApi


/' Entrega 3 '/

/' INCIDENTES '/
Class Incidente #bbffcc{
    - fechaApertura: Date
    - fechaCierre: Date
    - resuelto: Boolean 
}

Class IncidenteDeComunidad #bbffcc{
    - incidente: Incidente
    - usuario: Usuario
    - observaciones: String
    - fechaCierre: Date
}

Class NotificarIncidente #bbffcc {
    + notificar()
    + notificarComunidadesDeUsuario(Usuario, Incidente)
    + notificarUsuarioConInteres(Incidente)
}

Incidente "*" <-- PrestacionDeServicio 
Comunidad --> "*" IncidenteDeComunidad
IncidenteDeComunidad --> Incidente
IncidenteDeComunidad --> Usuario

/' CONFIGURACION DE NOTIFICACIONES '/
Class EstrategiaDeNotificacion #bbffcc{
    - formaDeRecibir: FormaDeRecibir
    - medioPreferido: MedioDeNotificacion
}

Interface MedioDeNotificacion #bbffcc{

}

Class NotificarPorWhatsApp #bbffcc{

}

Class NotificarPorMail #bbffcc{

}

/' ADAPTERS MEDIO DE NOTIFICACION '/

Interface AdapterNotificarPorWhatsapp #bbffcc{
    
}

Interface AdapterNotificarPorMail #bbffcc{
    
}

Class AdapterWhatsApp #bbffcc{

}

Class AdapterMail #bbffcc{

}

Interface FormaDeRecibir #bbffcc{
    + enviarNotificacion()
}

Class CuandoSuceden #bbffcc{
    + enviarNotificacion()
}

Class SinApuros #bbffcc{
    - horarios: Set<Date>
    - incidentesANotificar: Set<IncidenteDeComunidad>

    + enviarNotificacion()
    + agregarIncidenteANotificar(incidente: IncidenteDeComunidad)
}

/' NOTIFICACIONES '/

Class FactoryNotificacion #bbffcc{
    + crearNotificacion(notificacion: INotificacion) 
}

Interface INotificacion #bbffcc{
    + algunaOperacion(): void
}

Class Notificacion #bbffcc{
    - titulo: String
    - mensaje: String
}

EstrategiaDeNotificacion <-- Usuario

FormaDeRecibir <-- EstrategiaDeNotificacion
MedioDeNotificacion <-- EstrategiaDeNotificacion

CuandoSuceden ..|> FormaDeRecibir
SinApuros ..|> FormaDeRecibir


/' Whatsapp '/
AdapterWhatsApp ..|> AdapterNotificarPorWhatsapp
AdapterNotificarPorWhatsapp ..|> NotificarPorWhatsApp
NotificarPorWhatsApp ..|> MedioDeNotificacion

/' Mail '/
AdapterMail ..|> AdapterNotificarPorMail
AdapterNotificarPorMail ..|> NotificarPorMail
NotificarPorMail ..|> MedioDeNotificacion

FactoryNotificacion .> INotificacion
INotificacion <|.. Notificacion

/' SUGERENCIA REVISION DE INCIDENTE '/

/' Class RevisionDeIncidente {
    + estaCerca(miembro: Miembro, incidente: Incidente): Boolean
    + avisarRevisionDeIncidente(miembro: Miembro, incidente: Incidente): void
} '/


/' RANKINGS '/

Class FactoryGenerarRankings #bbffcc{
    - rankings: Set<Ranking>

    + generarRankings()
}

Interface Ranking #bbffcc{
    + generarRanking()
}

Class RankingPromedioCierreIncidentes #bbffcc{
    + generarRanking()
    + tiempoDeCierreDeIncidente(incidente: Incidente): Float
}

Class RankingMayorCantidadDeIncidentesSemana #bbffcc{
    + generarRanking()
    + incidenteOcurrioEnLaSemana(incidente: Incidente): Boolean
    + incidenteSeGeneroEnDespuesDe24Hs(incidente: Incidente): Boolean
}

Class RankingImpactoProblematicas #bbffcc{
    + generarRanking()
    + comunidadConMayorImpacto() : Comunidad
}



FactoryGenerarRankings --> "*" Ranking
Ranking <|.. RankingPromedioCierreIncidentes
Ranking <|.. RankingMayorCantidadDeIncidentesSemana
Ranking <|.. RankingImpactoProblematicas

/' AFECTADO U OBSERVADOR '/

/' Class Membresia {
    - tipoDeUsuario: TipoDeUsuario

    + cambiarDeTipoDeUsuario(tipoDeUsuario: TipoDeUsuario)
    + actuar()
}

Interface TipoDeUsuario {
    + actuar(Membresia: Membresia)
}

Class Afectado {
    - prestacionesDeServicio: Set<PrestacionDeServicio>    
    + actuar(Membresia: Membresia)
}

Class Observador {
    + actuar(Membresia: Membresia)
}

Membresia --> TipoDeUsuario
TipoDeUsuario <|.. Afectado
TipoDeUsuario <|.. Observador
Afectado --> "*" PrestacionDeServicio

Class TipoDeUsuario {
    - nombre: String
    - prestacionesDeServicio: Set<PrestacionDeServicio>
}

Membresia --> TipoDeUsuario '/

PrestacionDeServicio -[hidden]-> FactoryNotificacion
PrestacionDeServicio -[hidden]-> RevisionDeIncidente
PrestacionDeServicio -[hidden]-> FactoryGenerarRankings

@enduml
